{"mappings":"I,E,E,E,E,E,MCGI,E,E,C,E,E,C,E,O,E,C,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,G,iB,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,c,+C,c,+C,E,E,S,E,E,SAAA,EAAW,KAaf,AAVA,iBACI,GAAI,CACA,IAAM,EAAa,AAAA,EAAA,YAAW,CAAE,YAAY,CAC5C,EAAW,IAAI,EAAA,QAAO,CAAE,EAC5B,CAAE,MAAO,EAAO,CACZ,KAAK,WAAW,CAAC,CAAE,MAAO,+BAAgC,EAC9D,CACJ,IAKA,KAAK,SAAS,CAAG,eAAe,CAAC,EAExB,GACD,MAAM,IAAI,QAAQ,AAAA,IACd,IAAM,EAAgB,KACd,EAAU,IACT,WAAW,EAAe,IACnC,EACA,GACJ,GAGJ,GAAM,CAAA,OAAE,CAAM,CAAA,UAAE,CAAS,CAAA,WAAE,CAAU,CAAE,CAAG,EAAE,IAAI,CAEhD,GAAI,CACA,IAAM,EAAW,IAAI,AAAA,EAAA,YAAW,CAAE,QAAQ,CAAC,GACrC,EAAU,EAAE,CAElB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAE,IAAK,CACpC,IAAM,EAAe,CAAM,CAAC,EAAE,CAExB,EAAW,EAAS,SAAS,CAAC,EAAS,aAAa,CAAC,IAAe,KAAK,CACzE,EAAgB,EAAS,aAAa,CAAC,GAEvC,EAAQ,EAAS,OAAO,CAAC,GAE/B,EAAQ,IAAI,CAAC,CACT,UAAW,EAAS,aAAa,CAAC,EAAM,SAAS,EACjD,MAAO,EAAS,aAAa,CAAC,EAAM,KAAK,EACzC,MAAO,EAAa,CACxB,EACJ,CAEA,EAAS,QAAQ,GACjB,KAAK,WAAW,CAAC,CAAE,OAAQ,CAAQ,EAEvC,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,oBAAqB,GACnC,KAAK,WAAW,CAAC,CAAE,MAAO,EAAM,OAAO,AAAC,EAC5C,CACJ","sources":["<anon>","src/workers/fft-worker.js"],"sourcesContent":["(function () {\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired167\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired167\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nimportScripts(\"./onset-worker.de4b4b23.js\");\nimportScripts(\"./onset-worker.ba3c5734.js\");\nvar $daa32a16b89bda4f$exports = {};\n\nvar $d9WA8 = parcelRequire(\"d9WA8\");\n\nvar $H1nyG = parcelRequire(\"H1nyG\");\nlet $daa32a16b89bda4f$var$essentia = null;\n// Initialize essentia\nasync function $daa32a16b89bda4f$var$initEssentia() {\n    try {\n        const wasmModule = (0, $d9WA8.EssentiaWASM).EssentiaWASM;\n        $daa32a16b89bda4f$var$essentia = new (0, $d9WA8.Essentia)(wasmModule);\n    } catch (error) {\n        self.postMessage({\n            error: \"Failed to initialize essentia\"\n        });\n    }\n}\n// Initialize immediately\n$daa32a16b89bda4f$var$initEssentia();\nself.onmessage = async function(e) {\n    // Wait for essentia to be initialized\n    if (!$daa32a16b89bda4f$var$essentia) await new Promise((resolve)=>{\n        const checkEssentia = ()=>{\n            if ($daa32a16b89bda4f$var$essentia) resolve();\n            else setTimeout(checkEssentia, 100);\n        };\n        checkEssentia();\n    });\n    const { frames: frames, frameSize: frameSize, startIndex: startIndex } = e.data;\n    try {\n        const PolarFFT = new (0, $H1nyG.PolarFFTWASM).PolarFFT(frameSize);\n        const results = [];\n        for(let i = 0; i < frames.length; i++){\n            const currentFrame = frames[i];\n            const windowed = $daa32a16b89bda4f$var$essentia.Windowing($daa32a16b89bda4f$var$essentia.arrayToVector(currentFrame)).frame;\n            const windowedArray = $daa32a16b89bda4f$var$essentia.vectorToArray(windowed);\n            const polar = PolarFFT.compute(windowedArray);\n            results.push({\n                magnitude: $daa32a16b89bda4f$var$essentia.vectorToArray(polar.magnitude),\n                phase: $daa32a16b89bda4f$var$essentia.vectorToArray(polar.phase),\n                index: startIndex + i\n            });\n        }\n        PolarFFT.shutdown();\n        self.postMessage({\n            frames: results\n        });\n    } catch (error) {\n        console.error(\"FFT Worker error:\", error);\n        self.postMessage({\n            error: error.message\n        });\n    }\n};\n\n})();\n//# sourceMappingURL=fft-worker.efb741ec.js.map\n","import { Essentia, EssentiaWASM } from 'essentia.js';\r\nimport { PolarFFTWASM } from '../../lib/polarFFT.module.js';\r\n\r\nlet essentia = null;\r\n\r\n// Initialize essentia\r\nasync function initEssentia() {\r\n    try {\r\n        const wasmModule = EssentiaWASM.EssentiaWASM;\r\n        essentia = new Essentia(wasmModule);\r\n    } catch (error) {\r\n        self.postMessage({ error: 'Failed to initialize essentia' });\r\n    }\r\n}\r\n\r\n// Initialize immediately\r\ninitEssentia();\r\n\r\nself.onmessage = async function(e) {\r\n    // Wait for essentia to be initialized\r\n    if (!essentia) {\r\n        await new Promise(resolve => {\r\n            const checkEssentia = () => {\r\n                if (essentia) resolve();\r\n                else setTimeout(checkEssentia, 100);\r\n            };\r\n            checkEssentia();\r\n        });\r\n    }\r\n\r\n    const { frames, frameSize, startIndex } = e.data;\r\n    \r\n    try {\r\n        const PolarFFT = new PolarFFTWASM.PolarFFT(frameSize);\r\n        const results = [];\r\n\r\n        for (let i = 0; i < frames.length; i++) {\r\n            const currentFrame = frames[i];\r\n\r\n            const windowed = essentia.Windowing(essentia.arrayToVector(currentFrame)).frame;\r\n            const windowedArray = essentia.vectorToArray(windowed);\r\n        \r\n            const polar = PolarFFT.compute(windowedArray);\r\n            \r\n            results.push({\r\n                magnitude: essentia.vectorToArray(polar.magnitude),\r\n                phase: essentia.vectorToArray(polar.phase),\r\n                index: startIndex + i\r\n            });\r\n        }\r\n\r\n        PolarFFT.shutdown();\r\n        self.postMessage({ frames: results });\r\n        \r\n    } catch (error) {\r\n        console.error('FFT Worker error:', error);\r\n        self.postMessage({ error: error.message });\r\n    }\r\n}; "],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","$d9WA8","$H1nyG","$daa32a16b89bda4f$var$essentia","globalThis","self","window","global","id","exports","init","module","call","err","Error","code","register","importScripts","$daa32a16b89bda4f$var$initEssentia","wasmModule","EssentiaWASM","Essentia","error","postMessage","onmessage","e","Promise","resolve","checkEssentia","setTimeout","frames","frameSize","startIndex","data","PolarFFT","PolarFFTWASM","results","i","length","currentFrame","windowed","Windowing","arrayToVector","frame","windowedArray","vectorToArray","polar","compute","push","magnitude","phase","index","shutdown","console","message"],"version":3,"file":"fft-worker.efb741ec.js.map"}