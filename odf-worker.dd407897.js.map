{"mappings":"I,E,E,E,E,MCEI,E,E,C,E,E,C,E,O,E,C,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,G,iB,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,c,+C,E,E,SAAA,EAAW,KAaf,AAVA,iBACE,GAAI,CACF,IAAM,EAAa,AAAA,EAAA,YAAW,CAAE,YAAY,CAC5C,EAAW,IAAI,EAAA,QAAO,CAAE,EAC1B,CAAE,MAAO,EAAO,CACd,KAAK,WAAW,CAAC,CAAE,MAAO,+BAAgC,EAC5D,CACF,IAKA,KAAK,SAAS,CAAG,eAAgB,CAAC,EAE3B,GACH,MAAM,IAAI,QAAQ,AAAC,IACjB,IAAM,EAAgB,KAChB,EAAU,IACT,WAAW,EAAe,IACjC,EACA,GACF,GAGF,GAAM,CAAA,OAAE,CAAM,CAAA,YAAE,CAAW,CAAA,WAAE,CAAU,CAAA,WAAE,CAAU,CAAE,CAAG,EAAE,IAAI,CAE9D,GAAI,CACF,IAAM,EAAY,EAAO,GAAG,CAAC,CAAC,EAAO,IAqB5B,CAAA,CACL,KAAA,CAnBE,AAAgB,QAAhB,EAEO,EAAS,cAAc,CAC9B,EAAS,aAAa,CAAC,EAAM,SAAS,EACtC,EAAS,aAAa,CAAC,IAAI,aAAa,EAAM,SAAS,CAAC,MAAM,GAC9D,EACA,GAIO,EAAS,cAAc,CAC9B,EAAS,aAAa,CAAC,EAAM,SAAS,EACtC,EAAS,aAAa,CAAC,EAAM,KAAK,EAClC,EACA,GAMF,MAAO,EAAa,CACtB,CAAA,GAGF,KAAK,WAAW,CAAC,CACf,UAAA,EACA,YAAA,CACF,EACF,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,oBAAqB,GACnC,KAAK,WAAW,CAAC,CAAE,MAAO,EAAM,OAAO,AAAC,EAC1C,CACF","sources":["<anon>","src/workers/odf-worker.js"],"sourcesContent":["(function () {\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired167\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired167\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nimportScripts(\"./onset-worker.de4b4b23.js\");\nvar $6bb62d3a13a5f9da$exports = {};\n\nvar $d9WA8 = parcelRequire(\"d9WA8\");\nlet $6bb62d3a13a5f9da$var$essentia = null;\n// Initialize essentia\nasync function $6bb62d3a13a5f9da$var$initEssentia() {\n    try {\n        const wasmModule = (0, $d9WA8.EssentiaWASM).EssentiaWASM;\n        $6bb62d3a13a5f9da$var$essentia = new (0, $d9WA8.Essentia)(wasmModule);\n    } catch (error) {\n        self.postMessage({\n            error: \"Failed to initialize essentia\"\n        });\n    }\n}\n// Initialize immediately\n$6bb62d3a13a5f9da$var$initEssentia();\nself.onmessage = async function(e) {\n    // Wait for essentia to be initialized\n    if (!$6bb62d3a13a5f9da$var$essentia) await new Promise((resolve)=>{\n        const checkEssentia = ()=>{\n            if ($6bb62d3a13a5f9da$var$essentia) resolve();\n            else setTimeout(checkEssentia, 100);\n        };\n        checkEssentia();\n    });\n    const { frames: frames, odfFunction: odfFunction, sampleRate: sampleRate, startIndex: startIndex } = e.data;\n    try {\n        const odfValues = frames.map((frame, i)=>{\n            let result;\n            if (odfFunction === \"hfc\") // HFC only needs magnitude\n            result = $6bb62d3a13a5f9da$var$essentia.OnsetDetection($6bb62d3a13a5f9da$var$essentia.arrayToVector(frame.magnitude), $6bb62d3a13a5f9da$var$essentia.arrayToVector(new Float32Array(frame.magnitude.length)), odfFunction, sampleRate);\n            else // Complex needs both magnitude and phase\n            result = $6bb62d3a13a5f9da$var$essentia.OnsetDetection($6bb62d3a13a5f9da$var$essentia.arrayToVector(frame.magnitude), $6bb62d3a13a5f9da$var$essentia.arrayToVector(frame.phase), odfFunction, sampleRate);\n            return {\n                value: result,\n                index: startIndex + i\n            };\n        });\n        self.postMessage({\n            odfValues: odfValues,\n            odfFunction: odfFunction\n        });\n    } catch (error) {\n        console.error(\"ODF Worker error:\", error);\n        self.postMessage({\n            error: error.message\n        });\n    }\n};\n\n})();\n//# sourceMappingURL=odf-worker.dd407897.js.map\n","import { Essentia, EssentiaWASM } from \"essentia.js\";\r\n\r\nlet essentia = null;\r\n\r\n// Initialize essentia\r\nasync function initEssentia() {\r\n  try {\r\n    const wasmModule = EssentiaWASM.EssentiaWASM;\r\n    essentia = new Essentia(wasmModule);\r\n  } catch (error) {\r\n    self.postMessage({ error: \"Failed to initialize essentia\" });\r\n  }\r\n}\r\n\r\n// Initialize immediately\r\ninitEssentia();\r\n\r\nself.onmessage = async function (e) {\r\n  // Wait for essentia to be initialized\r\n  if (!essentia) {\r\n    await new Promise((resolve) => {\r\n      const checkEssentia = () => {\r\n        if (essentia) resolve();\r\n        else setTimeout(checkEssentia, 100);\r\n      };\r\n      checkEssentia();\r\n    });\r\n  }\r\n\r\n  const { frames, odfFunction, sampleRate, startIndex } = e.data;\r\n\r\n  try {\r\n    const odfValues = frames.map((frame, i) => {\r\n      let result;\r\n\r\n      if (odfFunction === \"hfc\") {\r\n        // HFC only needs magnitude\r\n        result = essentia.OnsetDetection(\r\n          essentia.arrayToVector(frame.magnitude),\r\n          essentia.arrayToVector(new Float32Array(frame.magnitude.length)), // Empty phase\r\n          odfFunction,\r\n          sampleRate,\r\n        );\r\n      } else {\r\n        // Complex needs both magnitude and phase\r\n        result = essentia.OnsetDetection(\r\n          essentia.arrayToVector(frame.magnitude),\r\n          essentia.arrayToVector(frame.phase),\r\n          odfFunction,\r\n          sampleRate,\r\n        );\r\n      }\r\n\r\n      return {\r\n        value: result,\r\n        index: startIndex + i,\r\n      };\r\n    });\r\n\r\n    self.postMessage({\r\n      odfValues,\r\n      odfFunction,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"ODF Worker error:\", error);\r\n    self.postMessage({ error: error.message });\r\n  }\r\n};\r\n"],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","$d9WA8","$6bb62d3a13a5f9da$var$essentia","globalThis","self","window","global","id","exports","init","module","call","err","Error","code","register","importScripts","$6bb62d3a13a5f9da$var$initEssentia","wasmModule","EssentiaWASM","Essentia","error","postMessage","onmessage","e","Promise","resolve","checkEssentia","setTimeout","frames","odfFunction","sampleRate","startIndex","data","odfValues","map","frame","i","value","OnsetDetection","arrayToVector","magnitude","Float32Array","length","phase","index","console","message"],"version":3,"file":"odf-worker.dd407897.js.map"}